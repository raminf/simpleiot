"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Common = void 0;
/* Â© 2022 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
 *
 * SimpleIOT project.
 * Author: Ramin Firoozye (framin@amazon.com)
*/
/*
* Common utilities
 */
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
class Common {
    static output(obj, name, value, desc) {
        if (value) {
            new cdk.CfnOutput(obj, name, {
                value: value,
                description: desc
            }).overrideLogicalId(name);
        }
    }
    // Returns the python runtime version used for all lambda layers.
    //
    static pythonRuntimeVersion() {
        return lambda.Runtime.PYTHON_3_10;
    }
    // Utility to add mulitple tags to a construct
    //
    static addTags(construct, tags) {
        for (let key in tags) {
            let value = tags[key];
            cdk.Tags.of(construct).add(key, value);
        }
    }
    static snakeToCamel(s) {
        return s.replace(/(\_\w)/g, function (m) { return m[1].toUpperCase(); });
    }
    static isLower(character) {
        return (character === character.toLowerCase()) && (character !== character.toUpperCase());
    }
    static generatePassword(length, withUpper = false, withSymbol = false) {
        var haveUpper = false;
        var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        if (withSymbol) {
            charSet += "!@#$%^&*()_+=";
        }
        var result = Array.apply(null, Array(length)).map(function () {
            var one = charSet.charAt(Math.random() * charSet.length);
            if (withUpper && !haveUpper) {
                if (Common.isLower(one)) {
                    one = one.toUpperCase();
                    haveUpper = true;
                }
            }
            return one;
        }).join('');
        return result;
    }
}
exports.Common = Common;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7O0VBSUU7QUFDRjs7R0FFRztBQUNILG1DQUFtQztBQUVuQyxpREFBaUQ7QUFHakQsTUFBYSxNQUFNO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFjLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxJQUFZO1FBQzFFLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7Z0JBQ3JCLEtBQUssRUFBRSxLQUFLO2dCQUNaLFdBQVcsRUFBRSxJQUFJO2FBQ3BCLENBQ0osQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUM1QjtJQUNMLENBQUM7SUFFRCxpRUFBaUU7SUFDakUsRUFBRTtJQUNLLE1BQU0sQ0FBQyxvQkFBb0I7UUFDOUIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsOENBQThDO0lBQzlDLEVBQUU7SUFDSyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQW9CLEVBQUUsSUFBK0I7UUFDdkUsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDbEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDMUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFTO1FBQ2hDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBUyxDQUFDLElBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFpQjtRQUN0QyxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBYyxFQUNkLFlBQXFCLEtBQUssRUFDMUIsYUFBc0IsS0FBSztRQUUxRCxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxPQUFPLEdBQUcsZ0VBQWdFLENBQUM7UUFDL0UsSUFBSSxVQUFVLEVBQUU7WUFDWixPQUFPLElBQUksZUFBZSxDQUFBO1NBQzdCO1FBQ0QsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQzlDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RCxJQUFJLFNBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDekIsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNyQixHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO29CQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDO2lCQUNwQjthQUNKO1lBQ0QsT0FBTyxHQUFHLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUF0REQsd0JBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyogwqkgMjAyMiBBbWF6b24gV2ViIFNlcnZpY2VzLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFNpbXBsZUlPVCBwcm9qZWN0LlxuICogQXV0aG9yOiBSYW1pbiBGaXJvb3p5ZSAoZnJhbWluQGFtYXpvbi5jb20pXG4qL1xuLypcbiogQ29tbW9uIHV0aWxpdGllc1xuICovXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnYXdzLWNkay1saWIvYXdzLWxhbWJkYScpXG5cblxuZXhwb3J0IGNsYXNzIENvbW1vbiB7XG4gICAgcHVibGljIHN0YXRpYyBvdXRwdXQob2JqOiBDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZGVzYzogc3RyaW5nKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgbmV3IGNkay5DZm5PdXRwdXQob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLm92ZXJyaWRlTG9naWNhbElkKG5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBweXRob24gcnVudGltZSB2ZXJzaW9uIHVzZWQgZm9yIGFsbCBsYW1iZGEgbGF5ZXJzLlxuICAgIC8vXG4gICAgcHVibGljIHN0YXRpYyBweXRob25SdW50aW1lVmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIGxhbWJkYS5SdW50aW1lLlBZVEhPTl8zXzEwO1xuICAgIH1cbiAgICAvLyBVdGlsaXR5IHRvIGFkZCBtdWxpdHBsZSB0YWdzIHRvIGEgY29uc3RydWN0XG4gICAgLy9cbiAgICBwdWJsaWMgc3RhdGljIGFkZFRhZ3MoY29uc3RydWN0OiBDb25zdHJ1Y3QsIHRhZ3M6IHsgWyBuYW1lOiBzdHJpbmcgXTogYW55IH0pIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRhZ3MpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRhZ3Nba2V5XTtcbiAgICAgICAgICAgIGNkay5UYWdzLm9mKGNvbnN0cnVjdCkuYWRkKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzbmFrZVRvQ2FtZWwoczogc3RyaW5nKXtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKFxcX1xcdykvZywgZnVuY3Rpb24obSl7cmV0dXJuIG1bMV0udG9VcHBlckNhc2UoKTt9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpc0xvd2VyKGNoYXJhY3Rlcjogc3RyaW5nKSA6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIChjaGFyYWN0ZXIgPT09IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpKSAmJiAoY2hhcmFjdGVyICE9PSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZW5lcmF0ZVBhc3N3b3JkKGxlbmd0aDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoVXBwZXI6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aFN5bWJvbDogYm9vbGVhbiA9IGZhbHNlKSA6IHN0cmluZ1xuICAgIHtcbiAgICB2YXIgaGF2ZVVwcGVyID0gZmFsc2U7XG4gICAgdmFyIGNoYXJTZXQgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xuICAgIGlmICh3aXRoU3ltYm9sKSB7XG4gICAgICAgIGNoYXJTZXQgKz0gXCIhQCMkJV4mKigpXys9XCJcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KGxlbmd0aCkpLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9uZSA9IGNoYXJTZXQuY2hhckF0KE1hdGgucmFuZG9tKCkgKiBjaGFyU2V0Lmxlbmd0aCk7XG4gICAgICAgIGlmICh3aXRoVXBwZXIgJiYgIWhhdmVVcHBlcikge1xuICAgICAgICAgICAgaWYgKENvbW1vbi5pc0xvd2VyKG9uZSkpIHtcbiAgICAgICAgICAgICAgICBvbmUgPSBvbmUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBoYXZlVXBwZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvbmU7XG4gICAgfSkuam9pbignJyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSJdfQ==